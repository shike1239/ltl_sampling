## Example config file

# I set EPSILON = (work_space_size_x + work_space_size_y)/2/20;
EPSILON = 5
# Usually I set RADIUS = EPSILON*2
RADIUS = 10
# Minimum turning radius
min_radius = 15
# Time step for way points sequence
time_step = 0.1
# collision_check_rate is the percentage that sampling nodes will do the collision checking
# value is between 0 to 1. Higher this value give more accuracy for the planner but slower
# e.g. if you know the obstacles are large compares to sampling step, you can use 0.2~0.3.
# If you use the value 1, the planner gonna check every sampling node.
collision_check_rate = 0.5
#===========================================================================
# Task formula
# "(<> p0) && (<> p1) && (<> p2)" means visit p0, p1 and p2 region of interests
# "<> (p0 && <> (p1 && (<> p2)))" means visit p0, p1 and p2 region of interests and by this order
# Regin of interest(ROI) in formula start with a "p"
# ltl_formula = (<> p0) && (<> p1) && (<> p2)
; ltl_formula = <> (p0 && <> (p1 && <> p2))
; ltl_formula = <> (p5 && <> (p3 && <> (p1 && <> (p2 && <> (p0 && <> p4)))))
; ltl_formula = <> (p4 && <> (p0 && <> (p2 && <> (p5 && <> (p3 && <> p1)))))
; ltl_formula = <> (p4 && <> (p0 && <> (p2 && <> (p3 && <> p5))))
; ltl_formula = <> (p5 && <> (p3 && <> (p2 && <> (p0 && <> p4))))
; ltl_formula = <> (p5 && <> (p3 && <> (p2 && <> (p1 && <> (p0 && <> p4)))))
ltl_formula = <> (p5 && <> (p4 && <> (p0 && <> (p2 && <> (p1 && <> p3)))))
#ltl_formula = <> ( <> (p0 && (p1 -> <> p2)) && <> [] p3)
# ltl_formula = <> (p0 && (p1 -> <> p2))
# num_buchi_regions defines the number of ROIs in the task formula, this is case there are p1, p2 and p3 in formula, and list all 
# buchi_region_* = p* here, when adding a buchi_region, remember change num_buchi_regions
num_buchi_regions = 6
buchi_region_0 = p0
buchi_region_1 = p1
buchi_region_2 = p2
buchi_region_3 = p3
buchi_region_4 = p4
buchi_region_5 = p5
#buchi_region_3 = p3
# Indep region means the ROI that independent to each other, in this case means p0, p1 and p2 have no intersections
num_indep_regions = 6
indep_region_0 = 0
indep_region_1 = 1
indep_region_2 = 2
indep_region_3 = 3
indep_region_4 = 4
indep_region_5 = 5
#===========================================================================
# Set the initial state of the UAV
init_state_x = 5
init_state_y = 5
init_state_yaw = 0

#============================================================================
# Set environment
#============================================================================
# Size of the searching space
work_space_size_x = 100
work_space_size_y = 100
# Define the location of all ROIs in environment, now all ROI are defined as rectangle
# When adding an ROI, remember change num_ROI
# label_ROI_* defines the name of the ROI, if label_ROI_* = 0, means the ROI name for task formula is p0
num_ROI = 6

label_ROI_0 = 0
position_x_start_ROI_0 = 10
position_x_end_ROI_0 = 20
position_y_start_ROI_0 = 80
position_y_end_ROI_0 = 90

label_ROI_1 = 1
position_x_start_ROI_1 = 80
position_x_end_ROI_1 = 90
position_y_start_ROI_1 = 80
position_y_end_ROI_1 = 90

label_ROI_2 = 2
position_x_start_ROI_2 = 45
position_x_end_ROI_2 = 55
position_y_start_ROI_2 = 55
position_y_end_ROI_2 = 75

label_ROI_3 = 3
position_x_start_ROI_3 = 70
position_x_end_ROI_3 = 90
position_y_start_ROI_3 = 15
position_y_end_ROI_3 = 45

label_ROI_4 = 4
position_x_start_ROI_4 = 10
position_x_end_ROI_4 = 30
position_y_start_ROI_4 = 45
position_y_end_ROI_4 = 55

label_ROI_5 = 5
position_x_start_ROI_5 = 30
position_x_end_ROI_5 = 45
position_y_start_ROI_5 = 15
position_y_end_ROI_5 = 30



#label_ROI_3 = 3
#position_x_start_ROI_3 = 55
#position_x_end_ROI_3 = 95
#position_y_start_ROI_3 = 55
#position_y_end_ROI_3 = 95

#============================================================================
# Define the location of all obstacles in environment, now all ROI are defined as rectangle
# when adding an obstacle, remember change num_obstacles
num_obstacles = 5

position_x_start_obstacle_0 = 30
position_x_end_obstacle_0 = 60
position_y_start_obstacle_0 = 82
position_y_end_obstacle_0 = 86

position_x_start_obstacle_1 = 8
position_x_end_obstacle_1 = 35
position_y_start_obstacle_1 = 65
position_y_end_obstacle_1 = 68

position_x_start_obstacle_2 = 70
position_x_end_obstacle_2 = 90
position_y_start_obstacle_2 = 65
position_y_end_obstacle_2 = 68

position_x_start_obstacle_3 = 57
position_x_end_obstacle_3 = 60
position_y_start_obstacle_3 = 10
position_y_end_obstacle_3 = 38

position_x_start_obstacle_4 = 17
position_x_end_obstacle_4 = 20
position_y_start_obstacle_4 = 15
position_y_end_obstacle_4 = 35

# Set the iterations for the planner, solution towards to optimal when iterations -> infinite
# If set iterations = -1, planner will return a feasible solution as soon as it find one
iterations = -1